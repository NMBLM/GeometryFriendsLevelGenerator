In this section we will describe how we plan on creating a Procedural cooperative level generator. We will describe two similar approaches one that uses more information and another that uses more abstract terms.

For both approaches we will be using mixed authorship, using a level editor, a designer will give certain inputs providing the generator an overview of the expected solution of the level.

\subsection{Approach 1}
The first approach would have the designer providing the step by step solution, they would indicate where each character starts and then define a sequence of actions that each would do, describing how they would move, where they would use an ability, where they would interact with objects in the map, where the objectives are placed, and where and when they would interact with each other. Describing where characters interact with each other is more dependent on the game, because some interactions could be just a character being in a certain place while others might have characters timing their use of abilities together.

\subsection{Approach 2}
The second approach would have the designer providing an overview of the solution, they would indicate where each character starts, which objectives in the map have to be completed using cooperation and which can or have to be individual.


According to Julian Togelius et al[1] Procedural Content Generation or PCG is the algorithmic creation of game content with limited or indirect user input. They consider “content” to be most of what is in a game: levels, maps, game rules, textures, stories, items, quests, music, weapons, vehicles, characters, etc. Things that they do not consider to be content is the game engine itself and the NPC AI behaviour.\newline
Another term that they define is “games”, they define it using examples by saying that they consider games to be videogames, computer games, board games, card games, puzzles, etc. They do this because games are famously hard to define.\newline
What is most important for PCG is that the content generation is playable meaning it should be possible to finish a generated level.
When developing new tools it’s important to be able to classify them, so Julian Togelius et al[1] say that desirable properties for a PCG are:
\begin{itemize}
    \item\textbf{Speed:} the requirements for speed may vary because it depends on whether you need the content to be generated during the game or if you are generating it over months during the development of the game. (Geometry Friends does not require high speed generation)
    \item\textbf{Reliability:} this means that it can guarantee certain aspects, some generators might not need this quality but others may need to be certain there is an exit to a dungeon, but a texture that looks a bit weird might not be game breaking, for example. (Geometry Friends requires high reliability)
    \item\textbf{Controllability:} If there is something that can be changed, or tweaked by a human to specify certain aspects, this is very important in player adaptive mechanisms. (Geometry Friends requires high controllability)
    \item\textbf{Expressivity and diversity:} the ability to generate levels that aren’t just slight variations on the same thing, but also that aren’t all so different that they become senseless. This is one of the harder properties because of the difficulty to of measuring Expressivity or Diversity.
    \item\textbf{Creativity and believability:} this has to do with whether the generated content can be easily differentiated from human made content or not, mostly we want it to not be obvious.
\end{itemize}

Julian Togelius et al[1] described a taxonomy of PCG, a way to compare generators it consists of the following dimensions:
\begin{itemize}
    \item\textbf{Online vs Offline:} online is considered to be generation of content as the player is playing the game while offline is generation during the development of the game or before the player starts a game session. (For Geometry Friends will be offline)
    
    \item\textbf{Necessary vs Optional:} Necessary content is by definition required for completion of a level, while optional is not. This mostly affects the fact that Necessary content needs to be correct, meaning a level must be possible to be completed after generation of Necessary content, while Optional content does not. (For Geometry Friends will be Necessary)
    
    \item\textbf{Degree and Dimension of control:} this refers to how the humans can control the generated space, if a seed is used, then using the same seed will generate the exact same level, or you can use a set of parameters to better control the generation of the content over several dimensions. (For Geometry Friends having mixed authorship means it will have high control and dimensionality?)
    
    \item\textbf{Generic vs Adaptive:} Generic PCG methods do not take the player’s behaviour into account while Adaptive will analyse the behaviour and determine a set of parameters to adapt the generation of content. (For Geometry Friends will be Generic)
    
    \item\textbf{Stochastic vs Deterministic:} “Deterministic PCG allows the regeneration of the same content given the same starting point and method parameters as opposed to stochastic PCG where recreating the same content is usually not possible.“ (CpP) (For Geometry Friends will be either?)
    
    \item\textbf{Constructive vs Generate-and-test:} in constructive the PCG generates in on pass while in Generate-and-test it is in a loop of generation and then testing until a satisfactory solution is reached. (For Geometry Friends will be either?)
    
    \item\textbf{Automatic generation versus mixed authorship:} Automatic allows for limited input from the game designer, making possible to tweak some parameters. Mixed authorship tries to allow the designer to give a more abstract input for example drawing part of a 2D level and having the algorithm generate the rest based on constraint satisfaction. (For Geometry Friends will be mixed authorship)
\end{itemize}

\section{Extra/Examples for Latex}

\subsection{A Subsection Sample}
Please note that the first paragraph of a section or subsection is
not indented. The first paragraph that follows a table, figure,
equation etc. does not need an indent, either.

Subsequent paragraphs, however, are indented.

\subsubsection{Sample Heading (Third Level)} Only two levels of
headings should be numbered. Lower level headings remain unnumbered;
they are formatted as run-in headings.

\paragraph{Sample Heading (Fourth Level)}
The contribution should contain no more than four levels of
headings. Table~\ref{tab1} gives a summary of all heading levels.


\begin{table}
\caption{Table captions should be placed above the
tables.}\label{tab1}
\begin{tabular}{|l|l|l|}
\hline
Heading level &  Example & Font size and style\\
\hline
Title (centered) &  {\Large\bfseries Lecture Notes} & 14 point, bold\\
1st-level heading &  {\large\bfseries 1 Introduction} & 12 point, bold\\
2nd-level heading & {\bfseries 2.1 Printing Area} & 10 point, bold\\
3rd-level heading & {\bfseries Run-in Heading in Bold.} Text follows & 10 point, bold\\
4th-level heading & {\itshape Lowest Level Heading.} Text follows & 10 point, italic\\
\hline
\end{tabular}
\end{table}


\noindent Displayed equations are centered and set on a separate
line.
\begin{equation}
x + y = z
\end{equation}
Please try to avoid rasterized images for line-art diagrams and
schemas. Whenever possible, use vector graphics instead (see
Fig.~\ref{fig1}).

\begin{figure}
\includegraphics[width=\textwidth]{fig1.eps}
\caption{A figure caption is always placed below the illustration.
Please note that short captions are centered, while long ones are
justified by the macro package automatically.} \label{fig1}
\end{figure}

\begin{theorem}
This is a sample theorem. The run-in heading is set in bold, while
the following text appears in italics. Definitions, lemmas,
propositions, and corollaries are styled the same way.
\end{theorem}
%
% the environments 'definition', 'lemma', 'proposition', 'corollary',
% 'remark', and 'example' are defined in the LLNCS documentclass as well.
%
\begin{proof}
Proofs, examples, and remarks have the initial word in italics,
while the following text appears in normal font.
\end{proof}
For citations of references, we prefer the use of square brackets
and consecutive numbers. Citations using labels or the author/year
convention are also acceptable. The following bibliography provides
a sample reference list with entries for journal
articles~\cite{ref_article1}, an LNCS chapter, a
book~\cite{ref_book1}, proceedings without editors,
and a homepage. Multiple citations are grouped
\cite{ref_article1,ref_book1},
\cite{ref_article1,ref_book1}.




\begingroup
    \fontsize{13pt}{15pt}\selectfont
    \textbf{Content Table}
\endgroup
\begin{legal}
    \item \textbf{Introduction}
    \begin{legal}
        \item Motivation
        \item Goal
    \end{legal}
    \item \textbf{Related Work}
    \begin{legal}
        \item Procedural Level Generation
        \begin{legal}
            \item Content for Procedural Generation
            \item Procedural Content Generation Algorithms
        \end{legal}
        \item Cooperation in Video games
        \begin{legal}
            \item Game Mechanics for Cooperative Games
            \item Evaluation Cooperative Games
        \end{legal}
        \item Procedural Cooperative Level Generation
    \end{legal}
    \item \textbf{Geometry Friends}
    \begin{legal}
        \item What is a Level in Geometry Friends
        \item A generator for Geometry Friends
        \begin{legal}
            \item Previous work on Geometry Friends
        \end{legal}
    \end{legal}
    \item \textbf{Proposed Solution}
    \item \textbf{How to evaluate it}
    \item \textbf{ETA}
    \item \textbf{Conclusion\newline}
    \textbf{References}
\end{legal}

\clearpage